apiVersion: v1
kind: Namespace
metadata:
  name: jenkins
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
---
# jenkins 쿠버네티스 플러그인 사용을 위한 권한 설정
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: jenkins
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins
subjects:
  - kind: ServiceAccount
    name: jenkins
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
spec:
  selector:
    app: jenkins
  ports:
    - name: http-service
      port: 8080
      targetPort: http-service
    - name: http-agent
      port: 50000
      targetPort: http-agent
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      serviceAccountName: jenkins
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/jenkins
                    operator: Exists
      tolerations:
        - key: "node-role.kubernetes.io/jenkins"
          operator: "Exists"
          effect: "NoSchedule"
      containers:
        - name: jenkins
          image: jenkins/jenkins:2.316-jdk11
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          ports:
            - name: http-service
              containerPort: 8080 # 서비스
            - name: http-agent
              containerPort: 50000 # Master-Slave 노드 간 통신
          env:
            - name: CASC_JENKINS_CONFIG
              value: "/var/jenkins_home/casc_configs/jcasc.yaml"
            - name: JAVA_OPTS
              value: "-Djenkins.install.runSetupWizard=false"
            - name: TZ
              value: "Asia/Seoul"
          readinessProbe:
            httpGet:
              path: /login
              port: http-service
            initialDelaySeconds: 30
            failureThreshold: 5
            periodSeconds: 5
            timeoutSeconds: 5
          volumeMounts:
            # jenkins 볼륨
            - name: jenkins-volume
              mountPath: /var/jenkins_home
            # jenkins seed job pre-install
            - name: jenkins-seed-job
              mountPath: /usr/share/jenkins/ref/jobs/seed
            # github token 값
            - name: jenkins-cred
              mountPath: /run/secrets/choshsh-github-token
              subPath: choshsh-github-token
              readOnly: true
            # slack token 값
            - name: jenkins-cred
              mountPath: /run/secrets/slack-token
              subPath: slack-token
              readOnly: true
      # 플러그인 사전 설치, Config as Code(JCasC) 파일 다운로드, seed job config.xml 다운로드
      initContainers:
        - name: init-jenkins
          image: busybox
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          command:
            - sh
            - -c
            - |
              wget https://github.com/choshsh/jenkins-plugins/archive/refs/heads/master.zip -O /tmp/plugins.zip && \
                unzip -qq /tmp/plugins.zip -d /tmp && \
                mkdir -p /tmp/jenkins_home/plugins && \
                mv /tmp/jenkins-plugins-master/*.hpi /tmp/jenkins_home/plugins/ && \
                mkdir -p /tmp/jenkins_home/casc_configs && \
                wget https://raw.githubusercontent.com/choshsh/devops-study/master/manifest/jenkins/jcasc.yaml -O /tmp/jenkins_home/casc_configs/jcasc.yaml && \
                wget https://raw.githubusercontent.com/choshsh/devops-study/master/manifest/jenkins/config.xml -O /tmp/usr/share/jenkins/ref/jobs/seed/config.xml
          volumeMounts:
            - name: jenkins-volume
              mountPath: /tmp/jenkins_home
            - name: jenkins-seed-job
              mountPath: /tmp/usr/share/jenkins/ref/jobs/seed
      volumes:
        - name: jenkins-volume
          emptyDir: {}
        - name: jenkins-seed-job
          emptyDir: {}
        - name: jenkins-cred
          secret:
            secretName: jenkins-cred
