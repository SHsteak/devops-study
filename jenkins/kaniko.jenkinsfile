pipeline {
  agent {
    kubernetes {
      yamlFile 'jenkins/pod_template/kubectl.yaml'
    }
  }

  options {
      timeout(time: 10, unit: 'MINUTES')
  }

  parameters {
    string(name: 'git', defaultValue: 'github.com/choshsh/devops-study.git', description: 'Git repository URL (ex. github.com/choshsh/devops-study.git)')
    string(name: 'branch', defaultValue: 'dev', description: 'Git branch (ex. master, dev)')
    string(name: 'dockerfile', defaultValue: 'dockerfiles/kubectl', description: 'dockerfile path in Git repository')
    string(name: 'image', defaultValue: 'choshsh/kubectl', description: 'ImageRepository/imageName')
    string(name: 'tag', defaultValue: 'v1.21.1-alpine', description: 'Image Tag')
  }

  environment {
    builNumber = "${currentBuild.number}"
    dockerFile = 'https://' + "${params.git.replace('.git', '')}" + '/blob/' + "${params.branch}" + '/' + "${params.dockerfile}"
  }

  stages {
    stage('Building Container By Kaniko') {
      steps {
        script {
          container('kubectl') {
            dir('manifest/utils') {
              stage('Setup yamlFile') {
                sh """
                    sed -i "s~name: kaniko~name: kaniko-\$builNumber~" kaniko.yaml
                    sed -i "s~app: kaniko~app: kaniko-\$builNumber~" kaniko.yaml

                    sed -i "s~--dockerfile=.*~--dockerfile=${params.dockerfile}\\"~" kaniko.yaml
                    sed -i "s~--context=.*~--context=git://${params.git}#refs/heads/${params.branch}\\"~" kaniko.yaml
                    sed -i "s~--destination=.*~--destination=${params.image}:${params.tag}\\"~" kaniko.yaml
                """
                sh 'cat kaniko.yaml'
              }
              stage('Build & Push') {
                sh 'kubectl apply -n jenkins -f kaniko.yaml'
              }
              stage('Tail log') {
                sleep(time: 10, unit: "SECONDS")
                sh 'kubectl logs -f -n jenkins -l "app=kaniko-\$builNumber"'
              }
            }
          }
        }
      }
    }
  }
  post{
    always {
      slackSend(color: "${currentBuild.currentResult  == 'SUCCESS' ? 'good' : 'danger'}", message: """
Job        : ${env.JOB_NAME} #${env.BUILD_NUMBER}
Status     : ${currentBuild.currentResult}
URL        : ${env.BUILD_URL}
Image      : ${params.image}
Tag        : ${params.tag}
DockerFile : ${env.dockerFile}
      """)
    }
  }
}