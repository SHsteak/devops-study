#!groovy

@Library('choshsh') _

pipeline {
  agent {
    kubernetes {
      yamlFile POD_TEMPLATE
      workspaceVolume hostPathWorkspaceVolume(hostPath: '/data')
    }
  }

  environment {
    IMAGE_TAG = "${currentBuild.startTimeInMillis}"
    WORKDIR = "${env.GRADLE_WORK_DIR + "/" + env.PROJECT_NAME}"
  }

  options {
    timeout(time: 10, unit: 'MINUTES')
  }

  stages {
    stage('Setup Repo') {
      steps {
        container('jdk') {
          dir(env.WORKDIR) {
            git branch: env.BRANCH, credentialsId: env.GITHUB_CRED_ID, url: env.GIT
          }
        }
      }
    }
    stage('Grant execute permission for gradlew') {
      steps {
        container('jdk') {
          dir(env.WORKDIR) {
            sh "chmod +x gradlew"
          }
        }
      }
    }
    stage('Test') {
      when {
        environment name: 'TEST_ENABLE', value: "true"
      }
      steps {
        container('jdk') {
          dir(env.WORKDIR) {
            sh './gradlew clean test -g .gradle'
            junit "build/test-results/**/*.xml"
          }
        }
      }
    }
    stage('Build & Push') {
      environment {
        DOCKERHUB_PASSWORD = credentials("${env.DOCKERHUB_CRED_ID}")
      }
      steps {
        container('jdk') {
          dir(env.WORKDIR) {
            sh './gradlew jib -Ptag=$IMAGE_TAG -Djib.to.auth.username=$DOCKERHUB_USER \
                  -Djib.to.auth.password=$DOCKERHUB_PASSWORD -g .gradle'
          }
        }
      }
    }
    // Helm 차트의 이미지 태그 값을 수정합니다.
    stage('Edit helm value file') {
      steps {
        container('python') {
          sh "python ${env.YAML_EDITOR} \
                ${env.HELM_VALUE_PATH}/values-${env.PROJECT_NAME}.yaml \
                ${env.WORKDIR}/jenkins.yaml \
                /image/tag \
                ${env.IMAGE_TAG}"
          sh "cat ${env.HELM_VALUE_PATH}/values-${env.PROJECT_NAME}.yaml"
        }
      }
    }
    // GitOps 패턴의 ArgoCD를 사용하여 배포하기 때문에 ArgoCD가 바라보는 git 레포지토리에 commit 합니다.
    stage('Commit to deploy by ArgoCD') {
      environment {
        GITHUB_PASSWORD = credentials("${env.GITHUB_CRED_ID}")
        ARGOCD_GIT_FORMATTED = env.ARGOCD_GIT.replace("https://", "")
      }
      steps {
        container('git') {
          sh "git checkout -f"
          sh "git config user.email ${env.GITHUB_EMAIL}"
          sh "git config user.name ${env.GITHUB_USERNAME}"
          sh "git add ${env.HELM_VALUE_PATH}/values-${env.PROJECT_NAME}.yaml"
          sh 'git commit --allow-empty -m "Pushed by jenkins pipeline"'
          sh 'git push https://$GITHUB_PASSWORD@$ARGOCD_GIT_FORMATTED'
        }
      }
    }
  }
  post {
    always {
      slackSendCustom()
    }
  }
}